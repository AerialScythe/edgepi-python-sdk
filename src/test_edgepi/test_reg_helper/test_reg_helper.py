import pytest
from edgepi.reg_helper.reg_helper import _apply_opcode
from edgepi.tc.tc_constants import *

@pytest.mark.parametrize('reg_value, opcode, updated_reg_value', [
    (0b00000000, ConvMode.AUTO.value, 0b10000000),
    (0b10000000, ConvMode.AUTO.value, 0b10000000),
    (0b01111111, ConvMode.AUTO.value, 0b11111111),
    (0b11111111, ConvMode.AUTO.value, 0b11111111),
    (0b00000000, ConvMode.SINGLE.value, 0b00000000),
    (0b10000000, ConvMode.SINGLE.value, 0b00000000),
    (0b10000000, ConvMode.SINGLE.value, 0b00000000),
    (0b11111111, ConvMode.SINGLE.value, 0b01111111),
    (0b00000000, TCOps.SINGLE_SHOT.value, 0b01000000),
    (0b01000000, TCOps.SINGLE_SHOT.value, 0b01000000),
    (0b10111111, TCOps.SINGLE_SHOT.value, 0b11111111),
    (0b00001000, CJMode.ENABLE.value, 0b00000000),
    (0b00000000, CJMode.ENABLE.value, 0b00000000),
    (0b00000000, CJMode.DISABLE.value, 0b00001000),
    (0b00001000, CJMode.DISABLE.value, 0b00001000),
    (0b00000100, FaultMode.COMPARATOR.value, 0b00000000),
    (0b00000000, FaultMode.COMPARATOR.value, 0b00000000),
    (0b00000000, FaultMode.INTERRUPT.value, 0b00000100),
    (0b00000100, FaultMode.INTERRUPT.value, 0b00000100),
    (0b00000000, TCOps.CLEAR_FAULTS.value, 0b00000010),
    (0b00000001, NoiseFilterMode.Hz_60.value, 0b00000000),
    (0b00000000, NoiseFilterMode.Hz_60.value, 0b00000000),
    (0b00000000, NoiseFilterMode.Hz_50.value, 0b00000001),
    (0b00000001, NoiseFilterMode.Hz_50.value, 0b00000001),
    (0b11110000, AvgMode.AVG_1.value, 0b00000000),
    (0b00000000, AvgMode.AVG_2.value, 0b00010000),
    (0b00000000, AvgMode.AVG_4.value, 0b00100000),
    (0b00000000, AvgMode.AVG_8.value, 0b00110000),
    (0b00000000, AvgMode.AVG_16.value, 0b01000000),
    (0b00001111, TCType.TYPE_B.value, 0b00000000),
    (0b00000000, TCType.TYPE_E.value, 0b00000001),
    (0b00000000, TCType.TYPE_J.value, 0b00000010),
    (0b00000000, TCType.TYPE_K.value, 0b00000011),
    (0b00000000, TCType.TYPE_N.value, 0b00000100),
    (0b00000000, TCType.TYPE_R.value, 0b00000101),
    (0b00000000, TCType.TYPE_S.value, 0b00000110),
    (0b00000000, TCType.TYPE_T.value, 0b00000111),
    (0b00000000, VoltageMode.GAIN_8.value, 0b00001000),
    (0b00000000, VoltageMode.GAIN_32.value, 0b00001100),
])
def test_apply_opcode(reg_value, opcode, updated_reg_value):
    assert _apply_opcode(reg_value, opcode) == updated_reg_value
